"use strict";(self.webpackChunkRAMN_docs=self.webpackChunkRAMN_docs||[]).push([["666"],{2572:function(s,e,n){n.r(e),n.d(e,{default:()=>l});var c=n(5893),d=n(65);function r(s){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ul:"ul",li:"li",em:"em",pre:"pre",code:"code",img:"img",div:"div",strong:"strong"},(0,d.ah)(),s.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.h1,{id:"vcand",children:[(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#vcand",children:"#"}),"vcand"]}),"\n",(0,c.jsxs)(e.h2,{id:"can-fd-支持",children:[(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#can-fd-支持",children:"#"}),"CAN FD 支持"]}),"\n",(0,c.jsx)(e.p,{children:"vcand 脚本可在 Linux（仅限 Linux）上用于："}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"直接通过 socketcan 使用 RAMN 的 CAN FD 功能（即作为与 slcand 兼容的 CAN FD 替代方案）。"}),"\n",(0,c.jsx)(e.li,{children:"对 RAMN 的串行接口进行多路复用，使其能够同时被不同应用程序打开。"}),"\n"]}),"\n",(0,c.jsxs)(e.p,{children:["要使用它，首先执行 ",(0,c.jsx)(e.em,{children:"0_SetupVCAN.sh"}),"："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-bash",children:"sudo ./0_SetupVCAN.sh\n"})}),"\n",(0,c.jsxs)(e.p,{children:["这将启动一个名为“vcan0”的虚拟 CAN 接口，该接口应可通过 ",(0,c.jsx)(e.code,{children:"ifconfig"})," 显示出来。"]}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{src:"/firmware/vcand.png",alt:""})}),"\n",(0,c.jsx)(e.p,{children:"如果您只想利用 vcand 的 CAN FD slcan 支持，可以从这一步开始运行 RAMN_VCAND.py："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-bash",children:"sudo python RAMN_VCAND.py\n"})}),"\n",(0,c.jsxs)(e.p,{children:["您可以通过编辑 ",(0,c.jsx)(e.em,{children:"scripts/settings/linux.ini"})," 中的 ",(0,c.jsx)(e.em,{children:"VCAND_HARDWARE_PORT"}),"（默认：自动检测）或使用-r 选项来选择 RAMN 使用的串口。之后，您应该能够在 vcan0 上看到 RAMN 的 CAN 流量，例如通过以下命令："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-bash",children:"cansniffer -c vcan0\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{src:"/scripts/vcand_cansniffer.webp",alt:""})}),"\n",(0,c.jsx)(e.p,{children:"与 slcand 不同，此脚本将支持 CAN FD 帧。"}),"\n",(0,c.jsxs)(e.h2,{id:"串行多路复用2-个端口",children:[(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#串行多路复用2-个端口",children:"#"}),"串行多路复用（2 个端口）"]}),"\n",(0,c.jsx)(e.p,{children:"如果您希望在 Linux 将 RAMN 的串行端口用作 CAN 接口时仍能保持其可访问性，可以使用此脚本的多路复用功能。打开一个新的终端并执行："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo ./1_SpawnTTY.sh\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{src:"/scripts/vcand2.png",alt:""})}),"\n",(0,c.jsx)(e.p,{children:"这将创建一对虚拟串行设备，在本例中为 /dev/pts/3 和 /dev/pts/4。"}),"\n",(0,c.jsxs)(e.div,{className:"rspress-directive info",children:[(0,c.jsx)(e.div,{className:"rspress-directive-title",children:"注意"}),(0,c.jsxs)(e.div,{className:"rspress-directive-content",children:[(0,c.jsx)(e.p,{children:"如果您不想打开多个终端，也可以将此脚本在后台执行："}),(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo ./1_SpawnTTY.sh &\n"})}),(0,c.jsx)(e.p,{children:"如果未看到任何输出，请尝试改用以下命令来启动终端："}),(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"socat -d -d pty,raw,echo=0 pty,raw,echo=0\n"})})]})]}),"\n",(0,c.jsxs)(e.p,{children:["您必须将您创建的",(0,c.jsx)(e.strong,{children:"第一个设备"}),"作为参数提供给 RAMN_VCAND.py，这样您便可以像使用非复用模式下的 RAMN 一样使用",(0,c.jsx)(e.strong,{children:"第二个设备"})," 。"]}),"\n",(0,c.jsx)(e.p,{children:"通过-p1 参数执行脚本，以提供第一个设备的路径："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo python RAMN_VCAND.py -p1 /dev/pts/3\n"})}),"\n",(0,c.jsxs)(e.p,{children:["从这一步开始，您可以使用 vcan0 接口，同时仍然能够访问 RAMN 的串口。但是，您不应再使用 RAMN 的硬件串口（例如/dev/ttyACM0），而应改用",(0,c.jsx)(e.strong,{children:"第二个设备"})," （本例中为/dev/pts/4）。"]}),"\n",(0,c.jsx)(e.p,{children:"例如，您可以在访问/dev/pts/4 上的串行终端的同时，观察 vcan0 上的 CAN 流量："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo picocom --imap crcrlf --echo /dev/pts/4\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{src:"/scripts/vcand_multiplex.webp",alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["这将使您即使在使用 CARLA 脚本和诊断脚本时，也能够观察 CAN 流量。为此，您需要将 ",(0,c.jsx)(e.em,{children:"scripts/settings/linux.ini"})," 中的 ",(0,c.jsx)(e.em,{children:"PORT"})," 设置为第二个 pts（本例中为/dev/pts/4）。"]}),"\n",(0,c.jsxs)(e.h2,{id:"串行多路复用3-个端口",children:[(0,c.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#串行多路复用3-个端口",children:"#"}),"串行多路复用（3 个端口）"]}),"\n",(0,c.jsxs)(e.p,{children:["如果您希望使用第三个端口（以便在同时运行 CARLA 脚本和诊断脚本时观察 CAN 总线），可以执行 1_SpawnTTY.sh 来生成一对新的设备。然后，将",(0,c.jsx)(e.strong,{children:"每对设备中的第一个设备"}),"作为 -p1 和 -p2 参数提供。之后，您便可以将",(0,c.jsx)(e.strong,{children:"每对设备中的第二个设备"}),"用作串行终端。请注意，所有数据会在两个端口中镜像传输。"]}),"\n",(0,c.jsx)(e.p,{children:"执行以下命令以生成一对新的虚拟设备："}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo ./1_SpawnTTY.sh\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{src:"/scripts/vcand3.png",alt:""})}),"\n",(0,c.jsxs)(e.p,{children:["然后，将每对设备中的",(0,c.jsx)(e.strong,{children:"第一个设备"}),"作为 -p1 和 -p2 参数提供："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo python RAMN_VCAND.py -p1 /dev/pts/3 -p2 /dev/pts/10\n"})}),"\n",(0,c.jsxs)(e.div,{className:"rspress-directive warning",children:[(0,c.jsx)(e.div,{className:"rspress-directive-title",children:"警告"}),(0,c.jsx)(e.div,{className:"rspress-directive-content",children:(0,c.jsxs)(e.p,{children:["请确保不要将属于同一对的两个设备分别用作 -p1 和 -p2（例如：",(0,c.jsx)(e.code,{children:"-p1 /dev/pts/3 -p2 /dev/pts/4"})," 或 ",(0,c.jsx)(e.code,{children:"-p1 /dev/pts/10 -p2 /dev/pts/11"})," ），因为这会导致形成反馈循环，进而使设备溢出。"]})})]}),"\n",(0,c.jsxs)(e.p,{children:["之后，您应该能够从",(0,c.jsx)(e.strong,{children:"第二个设备"}),"访问这些端口，在本示例中即 /dev/pts/4 和 /dev/pts/11。例如，您可以在两个不同的终端中输入："]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo picocom --imap crcrlf --echo /dev/pts/4\n"})}),"\n",(0,c.jsx)(e.p,{children:"和"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"sudo picocom --imap crcrlf --echo /dev/pts/11\n"})}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{src:"/scripts/vcand_multiplex2.png",alt:""})}),"\n",(0,c.jsx)(e.p,{children:"从这一点来看，你应该能够通过三个不同的接口与相同的流量进行交互。"})]})}function i(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),s.components);return e?(0,c.jsx)(e,Object.assign({},s,{children:(0,c.jsx)(r,s)})):r(s)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["docs%2Fscripts%2Fvcand.mdx"]={toc:[{id:"can-fd-支持",text:"CAN FD 支持",depth:2},{id:"串行多路复用2-个端口",text:"串行多路复用（2 个端口）",depth:2},{id:"串行多路复用3-个端口",text:"串行多路复用（3 个端口）",depth:2}],title:"vcand",headingTitle:"vcand",frontmatter:{}}}}]);